import React, { useEffect, useState } from "react";
import "./SingleProduct.css";
import { Link, useParams } from "react-router-dom";
import Header from "./../../Shared/Header/Header";
import Footer from "../../Shared/Footer/Footer";

const SingleProduct = () => {
  const { viewDetails } = useParams();
  const [food, setFood] = useState([]);
  const [selectedSize, setSelectedSize] = useState(null);
  const [selectedExtras, setSelectedExtras] = useState([]);
  const [quantity, setQuantity] = useState(1);

  useEffect(() => {
    const fetchFood = async () => {
      try {
        const response = await fetch(
          `https://server.dishcofood.com/getSingleFood?singleFoodId=${viewDetails}`
        );
        const data = await response.json();
        setFood(data);
      } catch (error) {
        console.log("err", error);
      }
    };
    fetchFood();
  }, [viewDetails]);

  const handleChange = (event) => {
    setSelectedSize(event.target.value);
  };

  //add to refresh off
  const handleSubmit = (e) => {
    e.preventDefault();
  };

  //addons
  const handleExtraChange = (event) => {
    const extra = event.target.value;
    if (selectedExtras.includes(extra)) {
      setSelectedExtras(selectedExtras.filter((e) => e !== extra));
    } else {
      setSelectedExtras([...selectedExtras, extra]);
    }
  };

  const handleDecrease = () => {
    setQuantity(Math.max(quantity - 1, 1));
  };

  const handleIncrease = () => {
    setQuantity(quantity + 1);
  };

  const addToCart = () => {
    // matching the size's-price according to selected size
    const selectedFoodPrice = food.map(
      (data) => data?.sizePriceItem?.find((v) => v?.size === selectedSize).price
    );

    const item = {
      size: selectedSize,
      price: parseInt(selectedFoodPrice),
      extras: selectedExtras,
      quantity: quantity,
    };

    // duplicate item chacking then send it to the localstroage
    let cartItems = JSON.parse(localStorage.getItem("cartItems")) || [];

    const existingItemIndex = cartItems.findIndex(
      (cartItem) => cartItem.id === item.id && cartItem.size === item.size
    );

    if (existingItemIndex === -1) {
      cartItems.push(item);
    }

    // Store the updated cart items in local storage
    localStorage.setItem("cartItems", JSON.stringify(cartItems));
  };

  return (
    <>
      <Header />
      <section className="container singleProduct_main">
        {food.map((data) => (
          <div key={data._id} className="single_product_body">
            <aside className="single_product_img">
              <img src={data.Image} alt="food" />
            </aside>
            <aside className="single_product_details">
              <p>{data.foodCode}</p>
              <h1 className="single_product_name">{data.name}</h1>
              <p className="single_product_description">
                {data.foodDescription}
              </p>
              <p className="single_product_price my-3">
                {data.sizePriceItem.map((sizePrice, index) => (
                  <span key={index}>
                    <span>{sizePrice.price} Tk</span>
                  </span>
                ))}
              </p>
              <form onSubmit={handleSubmit}>
                {selectedSize && (
                  <h1>
                    {
                      data.sizePriceItem.find((v) => v.size === selectedSize)
                        .price
                    }
                    Tk
                  </h1>
                )}
                <select
                  name=""
                  id="food"
                  className="single_product_select_option mt-4"
                  onChange={handleChange}
                  required
                >
                  <option value="">Choose Size</option>
                  {data.sizePriceItem.map((variant) => (
                    <option key={variant.size} value={variant.size}>
                      {variant.size}
                    </option>
                  ))}
                </select>

                <div className="addons_checkbox my-5">
                  <h6>Extra Items</h6>
                  {data?.addonsItem?.map((addons, a) => (
                    <div key={a} className="form-check form-check-inline">
                      <input
                        className="form-check-input"
                        type="checkbox"
                        id="inlineCheckbox1"
                        value={addons?.addonName}
                        onChange={handleExtraChange}
                      />
                      <label
                        className="form-check-label"
                        htmlFor="inlineCheckbox1"
                      >
                        {addons?.addonName}
                      </label>
                    </div>
                  ))}
                </div>

                <div className="quantity_cart_button my-3">
                  <span className="quantity_cart_input">
                    <button
                      className="value-button"
                      id="decrease"
                      onClick={handleDecrease}
                    >
                      -
                    </button>
                    <input
                      type="number"
                      id="number"
                      value={quantity}
                      readOnly
                    />
                    <button
                      className="value-button"
                      id="increase"
                      onClick={handleIncrease}
                    >
                      +
                    </button>
                  </span>
                  <button
                    onClick={addToCart}
                    className="MyBtn add_to_cart_button"
                    type="submit"
                  >
                    <i className="bi bi-cart-fill"></i> Add To Cart
                  </button>
                </div>
              </form>
              <p className="my-3 categories_link my-4">
                Categories:{" "}
                <Link to="/" className="myLinks">
                  {data.categories}
                </Link>{" "}
                <i className="bi bi-chevron-right"></i>{" "}
                <Link to="/" className="myLinks">
                  {data.name}
                </Link>
              </p>
            </aside>
          </div>
        ))}
      </section>
      <Footer />
    </>
  );
};

export default SingleProduct;
